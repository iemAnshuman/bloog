This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  dependabot.yml
public/
  favicon.svg
scripts/
  create-post.ts
  release-theme.ts
  update-theme.ts
src/
  .config/
    default.ts
    index.ts
    user.ts
  components/
    analytics/
      GoogleAnalytics.astro
      UmamiAnalytics.astro
    comments/
      Disqus.astro
      Giscus.astro
      Twikoo.astro
    Analytics.astro
    Comments.astro
    LaTeX.astro
    Pagination.astro
    PostCategory.astro
    PostMeta.astro
    SiteFooter.astro
    SiteNavigation.astro
    SiteSeo.astro
    SiteTitle.astro
    ThemeScript.astro
  content/
    posts/
      life_worth_living.md
      python_cheatsheet.md
      quiet_war_of_focus.md
    spec/
      about.md
  layouts/
    LayoutDefault.astro
    LayoutPost.astro
    LayoutPostList.astro
  pages/
    categories/
      [...category].astro
      index.astro
    posts/
      [...id].astro
    [...page].astro
    about.astro
    archive.astro
    atom.xml.ts
  styles/
    global.css
  types/
    index.ts
    themeConfig.ts
  utils/
    index.ts
  content.config.ts
  env.d.ts
  global.d.ts
  i18n.ts
  middleware.ts
.gitattributes
.gitignore
.node-version
.nvmrc
astro.config.ts
CHANGELOG.md
eslint.config.mjs
LICENSE
mise.toml
package.json
README.md
tsconfig.json
uno.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/favicon.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>
</file>

<file path=".gitattributes">
*.xsl linguist-detectable=false
</file>

<file path=".gitignore">
# build output
dist/
# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*


# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

Markdown style guide.md
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2023 Moeyua

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="scripts/release-theme.ts">
import { execSync } from 'node:child_process'
import bumpp from 'bumpp'

execSync('git tag -l | xargs git tag -d')

let isChangelogenDone = false

await bumpp({
  tag: true,
  commit: true,
  progress: (progress) => {
    const { newVersion } = progress
    if (isChangelogenDone)
      return
    execSync(`changelogen --output -r ${newVersion}`)
    isChangelogenDone = true
  },
})
</file>

<file path="scripts/update-theme.ts">
import { execSync } from 'node:child_process'
import process from 'node:process'

try {
  // 检查是否已经添加了模板仓库
  execSync('git remote | grep template', { stdio: 'ignore' })
}
catch {
  // 如果没有添加，则添加模板仓库
  execSync(
    'git remote add template https://github.com/moeyua/astro-theme-typography.git',
    { stdio: 'inherit' },
  )
}

try {
  // 获取模板仓库的最新更改
  execSync('git fetch template', { stdio: 'inherit' })

  // 将模板仓库的最新更改合并到当前分支
  execSync('git merge template/main --allow-unrelated-histories', {
    stdio: 'inherit',
  })
}
catch (error) {
  console.error('更新主题时出错:', error)
  process.exit(1)
}
</file>

<file path="src/components/analytics/GoogleAnalytics.astro">
---
interface Props {
  id: string
}

const { id } = Astro.props

const gtagUrl = `https://www.googletagmanager.com/gtag/js?id=${id}`
---

<!-- Global site tag (gtag.js) - Google Analytics -->
<script is:inline async src={gtagUrl}></script>
<script is:inline define:vars={{ id }}>
  window.dataLayer = window.dataLayer || []
  function gtag() {
    // eslint-disable-next-line prefer-rest-params
    dataLayer.push(arguments)
  }
  gtag('js', new Date())
  gtag('config', id)
</script>
</file>

<file path="src/components/comments/Disqus.astro">
---
import { themeConfig } from '~/.config'

interface Props {
  identifier: string
  url: string
  title: string
}

const { identifier, url, title } = Astro.props
const { comment } = themeConfig

if (!comment || !comment.disqus) {
  throw new Error('Disqus comments are not configured')
}
const shortname = comment.disqus.shortname
---

<div id="disqus_thread"></div>

<script is:inline define:vars={{ shortname, identifier, url, title }}>
  window.disqus_config = function () {
    this.page.url = url
    this.page.identifier = identifier
    this.page.title = title
  }
  ;(function () {
    const d = document
    const s = d.createElement('script')
    s.src = `https://${shortname}.disqus.com/embed.js`
    s.setAttribute('data-timestamp', new Date().toString())
    ;(d.head || d.body).appendChild(s)
  })()
</script>
<noscript
  >Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a
  ></noscript
>
</file>

<file path="src/components/comments/Giscus.astro">
---
import { themeConfig } from '~/.config'

const { comment } = themeConfig

if (!comment || !comment.giscus) {
  throw new Error('Giscus comments are not configured')
}

const giscus = comment.giscus
---

<giscus-widget
  id="comments"
  repo={giscus.repo}
  repoId={giscus.repoId}
  category={giscus.category}
  categoryId={giscus.categoryId}
  mapping={giscus.mapping}
  term={giscus.term}
  strict={giscus.strict}
  reactionsEnabled={giscus.reactionsEnabled}
  emitMetadata={giscus.emitMetadata}
  inputPosition={giscus.inputPosition}
  theme={giscus.theme}
  lang={giscus.lang}
  loading={giscus.loading}
>
</giscus-widget>

<script>
  import 'giscus'
</script>
</file>

<file path="src/components/comments/Twikoo.astro">
---
import { themeConfig } from '~/.config'

interface Props {
  path: string
}

const twikooConfig = {
  ...themeConfig.comment?.twikoo,
  el: '#tcomment',
  path: Astro.props.path,
}
---

<div id="tcomment"></div>
<script is:inline src="https://cdn.staticfile.org/twikoo/1.6.32/twikoo.all.min.js"></script>
<script is:inline define:vars={{ config: twikooConfig }}>
  twikoo.init(config)
</script>

<style is:global>
  .tk-meta-input {
    background-color: white;
  }
</style>
</file>

<file path="src/components/PostCategory.astro">
---
import { themeConfig } from '~/.config'
import { getPathFromCategory } from '~/utils'

interface Props {
  category: string
}

const { category } = Astro.props

function getCategoryUrl(category: string) {
  return `/categories/${getPathFromCategory(category, themeConfig.site.categoryMap)}`
}
---

<a href={getCategoryUrl(category)}>
  # {category}
</a>
</file>

<file path="src/components/ThemeScript.astro">
---
import { themeConfig } from "~/.config";

const theme = themeConfig.appearance.theme;
---

<script is:inline define:vars={{ theme }}>
  function updateTheme(theme) {
    // Check if theme is system
    if (theme === "system") {
      // Check OS preference
      const prefersDark = window.matchMedia(
        "(prefers-color-scheme: dark)"
      ).matches;
      document.documentElement.classList.toggle("dark", prefersDark);
    } else {
      // Set theme directly
      document.documentElement.classList.toggle("dark", theme === "dark");
    }
  }

  // Initial theme setup
  updateTheme(theme);

  // Listen for OS theme changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      if (theme === "system") {
        document.documentElement.classList.toggle("dark", e.matches);
      }
    });
</script>
</file>

<file path="src/content/posts/quiet_war_of_focus.md">
---
title: Quiet War of Focus
pubDate: 2025-06-22
modDate: 2025-06-22 
categories: ["focus"]
description: A stream-of-consciousness dive into the war between outer noise, inner resistance, and the kind of calm, focused work that actually matters.
slug: quiet-war 
draft: false
pin: true
---

## Noise, Resistance, and the Quiet War of Focus

Some days the noise outside is deafening. Not just audible sounds—traffic, chatter, a barking dog—but the overwhelming chaos of living in a world constantly screaming for your attention. Notifications, ads, expectations, noise layered on noise, each more urgent than the last.

You wake with purpose—a plan laid out, clear, simple. Yet, before your feet touch the floor, the external chaos floods in, blurring the edges, pulling your mind in a thousand meaningless directions.

That's outer noise—easy to blame, easy to identify. But beneath that obvious chaos lies something more sinister, more subtle:

**Inner resistance.**

It doesn't shout—it whispers. Gentle, persuasive:

"Maybe you're too tired today."
"You deserve a break."
"You might fail anyway."
"Tomorrow would be better."

This resistance is cunning. It pretends to be your ally, offering comfort, safety, escape. It weaponizes logic, feeds you half-truths, and watches silently as ambition slips through your fingers like sand.

The truth no one shares enough: **Starting is painful.**

Not because the work itself is inherently difficult—though often it is—but because it requires passing through your own invisible barriers, breaking your comfortable illusions, shattering the cocoon of procrastination.

Because real focus isn’t pretty or effortless. It's a messy battle, gritty, exhausting, relentless. You don’t gracefully glide into deep work; you claw your way there, inch by painful inch, fighting every impulse that begs for distraction.

But here’s the strange beauty of relentless focus: **eventually, if you fight long enough, you break through.**

The noise doesn’t disappear—it becomes irrelevant. The resistance doesn't vanish—it loses power. You're simply there, quietly working, calmly ruthless, beyond doubt, beyond comfort, beyond the need for immediate reward.

In that quiet, in that rare intensity, there's clarity unlike anything else. The heart rate slows, thoughts sharpen. You become singular—one purpose, one task, one moment unfolding into the next.

This is calm hard work—not tranquil meditation, but disciplined rebellion. Silent, fierce, precise. No applause, no validation, no distractions.

Just you, wrestling with meaning.
Just you, battling noise.
Just you, creating something real.

And when you reach that place, it isn’t victory over the world—it’s victory over yourself.

In a culture obsessed with shortcuts and dopamine hits, choose the harder path:

**Sit down, quiet the noise, confront the resistance, and build something with intense, unflinching focus.**

That’s the quiet war worth fighting.
</file>

<file path="src/layouts/LayoutPost.astro">
---
import PostMeta from '~/components/PostMeta.astro'
import type { Post } from '~/types'

interface Props {
  post: Post
}

const { post } = Astro.props
---

<article class="prose">
  <PostMeta post={post} />
  <slot />
</article>
</file>

<file path="src/layouts/LayoutPostList.astro">
---
import PostMeta from '~/components/PostMeta.astro'
import type { Post } from '~/types'

interface Props {
  post: Post
}

const { post } = Astro.props
---

<article class="prose">
  <PostMeta post={post} />
  <slot />
</article>
</file>

<file path="src/pages/posts/[...id].astro">
---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import Comments from '~/components/Comments.astro'
import Pagination from '~/components/Pagination.astro'
import SiteSeo from '~/components/SiteSeo.astro'
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import LayoutPost from '~/layouts/LayoutPost.astro'
import { getPosts } from '~/utils'
import { render } from 'astro:content'

export const getStaticPaths = (async () => {
  const posts = await getPosts()
  return posts.map((post, idx) => {
    const prev = posts[idx - 1]
    const next = posts[idx + 1]
    return {
      params: { id: post.id },
      props: { entry: post, next, prev },
    }
  })
}) satisfies GetStaticPaths

// type Params = InferGetStaticParamsType<typeof getStaticPaths>
type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { entry, prev, next } = Astro.props
const { Content } = await render(entry)
const { translate: t } = Astro.locals

function getUrl(id: string) {
  return `/posts/${id}`
}
---

<LayoutDefault>
  <SiteSeo slot="seo" title={entry.data.title} desc={entry.data.description} banner={entry.data.banner} />

  <LayoutPost post={entry}>
    <Content />
  </LayoutPost>

  <Pagination
    showLeft={Boolean(prev)}
    leftTitle={`${t('prev_post')}: ${prev?.data.title}`}
    leftUrl={getUrl(prev?.id)}
    showRight={Boolean(next)}
    rightTitle={`${t('next_post')}: ${next?.data.title}`}
    rightUrl={getUrl(next?.id)}
    showPageCount={false}
  />
  <!-- BUG 这里使用 client:visible 会导致构建失败。ref: https://github.com/withastro/astro/issues/7329 -->
  <Comments post={entry} />
</LayoutDefault>

<script>
  import '@github/clipboard-copy-element'

  document.addEventListener('clipboard-copy', (event) => {
    const target = event.target as HTMLElement
    const icon = target.querySelector('.icon') as HTMLElement
    icon.classList.replace('i-mdi-content-copy', 'i-mdi-check')
    setTimeout(() => {
      icon.classList.replace('i-mdi-check', 'i-mdi-content-copy')
    }, 1500)
  })

  const codeBlocks = Array.from(document.querySelectorAll('pre'))
  const icon = "<div class='i-mdi-content-copy icon text-white'></div>"
  for (const codeBlock of codeBlocks) {
    const wrapper = document.createElement('div')
    wrapper.className = 'code-container'

    const copyButton = document.createElement('clipboard-copy')
    const code = codeBlock.querySelector('code')
    copyButton.value = code?.textContent ?? ''
    copyButton.className = 'clipboard-copy'
    copyButton.innerHTML = icon

    codeBlock.appendChild(copyButton)

    codeBlock.parentNode?.insertBefore(wrapper, codeBlock)
    wrapper.appendChild(codeBlock)
  }
</script>

<style is:global>
  .code-container {
    position: relative;
  }
  .clipboard-copy {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    width: 1.75rem;
    height: 1.75rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 0.25rem;
  }

  .clipboard-copy:hover {
    background-color: #30363d;
  }
</style>
</file>

<file path="src/global.d.ts">
import type { AttributifyAttributes } from '@unocss/preset-attributify'

declare global {
  namespace astroHTML.JSX {
    interface HTMLAttributes extends AttributifyAttributes {}
  }
}
</file>

<file path=".nvmrc">
v22.12.0
</file>

<file path="eslint.config.mjs">
import antfu from '@antfu/eslint-config'

export default antfu({
  formatters: true,
  unocss: true,
  astro: true,
})
</file>

<file path="mise.toml">
[tools]
node = "lts"
</file>

<file path="uno.config.js">
import presetAttributify from '@unocss/preset-attributify'
import transformerDirectives from '@unocss/transformer-directives'
import {
  defineConfig,
  presetIcons,
  presetTypography,
  presetUno,
  transformerVariantGroup,
} from 'unocss'
import presetTheme from 'unocss-preset-theme'
import { themeConfig } from './src/.config'

const { colorsDark, colorsLight, fonts } = themeConfig.appearance

const cssExtend = {
  ':root': {
    '--prose-borders': '#eee',
  },

  'code::before,code::after': {
    content: 'none',
  },

  ':where(:not(pre):not(a) > code)': {
    'white-space': 'normal',
    'word-wrap': 'break-word',
    'padding': '2px 4px',
    'color': '#c7254e',
    'font-size': '90%',
    'background-color': '#f9f2f4',
    'border-radius': '4px',
  },

  'li': {
    'white-space': 'normal',
    'word-wrap': 'break-word',
  },
}

export default defineConfig({
  rules: [
    [
      /^row-(\d+)-(\d)$/,
      ([, start, end]) => ({ 'grid-row': `${start}/${end}` }),
    ],
    [
      /^col-(\d+)-(\d)$/,
      ([, start, end]) => ({ 'grid-column': `${start}/${end}` }),
    ],
    [
      /^scrollbar-hide$/,
      ([_]) => `.scrollbar-hide { scrollbar-width:none;-ms-overflow-style: none; }
      .scrollbar-hide::-webkit-scrollbar {display:none;}`,
    ],
  ],
  presets: [
    presetUno(),
    presetTypography({ cssExtend }),
    presetAttributify(),
    presetIcons({ scale: 1.2, warn: true }),
    presetTheme ({
      theme: {
        dark: {
          colors: { ...colorsDark, shadow: '#FFFFFF0A' },
          // TODO 需要配置代码块颜色
        },
      },
    }),
  ],
  theme: {
    colors: { ...colorsLight, shadow: '#0000000A' },
    fontFamily: fonts,
  },
  shortcuts: [
    ['post-title', 'text-5 font-bold lh-7.5 m-0'],
  ],
  transformers: [transformerDirectives(), transformerVariantGroup()],
  safelist: [
    ...themeConfig.site.socialLinks.map(social => `i-mdi-${social.name}`),
    'i-mdi-content-copy',
    'i-mdi-check',
  ],
})
</file>

<file path=".github/dependabot.yml">
# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for all configuration options:
# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates

version: 2
updates:
  - package-ecosystem: npm
    directory: /
    schedule:
      interval: monthly
    labels:
      - dependencies
</file>

<file path="src/.config/index.ts">
import type { DeepPartial, ThemeConfig } from '~/types'
import { defaultConfig } from './default'
import { userConfig } from './user'

export const themeConfig = deepMerge<ThemeConfig>(defaultConfig, userConfig)

function deepMerge<T>(target: T, source: DeepPartial<T>): T {
  const output = { ...target }

  for (const [key, sourceValue] of Object.entries(source)) {
    const typedKey = key as keyof T
    const targetValue = output[typedKey]

    if (sourceValue !== undefined) {
      if (typeof sourceValue === 'object' && !Array.isArray(sourceValue)) {
        output[typedKey] = deepMerge(
          targetValue,
          sourceValue as DeepPartial<T[keyof T]>,
        )
      }
      else {
        output[typedKey] = sourceValue as T[keyof T]
      }
    }
  }

  return output
}
</file>

<file path="src/components/analytics/UmamiAnalytics.astro">
---
interface Props {
  id: string
}

const { id } = Astro.props
---

<!-- Global site tag (script.js) - Umami Analytics -->
<script is:inline async defer src="https://analytics.umami.is/script.js" data-website-id={id}></script>
</file>

<file path="src/components/Analytics.astro">
---
import GoogleAnalytics from '~/components/analytics/GoogleAnalytics.astro'
import UmamiAnalytics from '~/components/analytics/UmamiAnalytics.astro'
import { themeConfig } from '~/.config'

const PUBLIC_GOOGLE_ANALYTICS_ID = import.meta.env.PUBLIC_GOOGLE_ANALYTICS_ID
const googleAnalyticsId = themeConfig.analytics.googleAnalyticsId || PUBLIC_GOOGLE_ANALYTICS_ID

const PUBLIC_UMAMI_ANALYTICS_ID = import.meta.env.PUBLIC_UMAMI_ANALYTICS_ID
const umamiAnalyticsId = themeConfig.analytics.umamiAnalyticsId || PUBLIC_UMAMI_ANALYTICS_ID
---

{googleAnalyticsId && <GoogleAnalytics id={googleAnalyticsId} />}
{umamiAnalyticsId && <UmamiAnalytics id={umamiAnalyticsId} />}
</file>

<file path="src/components/LaTeX.astro">
---
import { themeConfig } from '~/.config'

const { latex } = themeConfig

const katex = latex.katex
---

{
  katex && (
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"
      crossorigin="anonymous"
    />
  )
}
</file>

<file path="src/components/SiteFooter.astro">
---
import { themeConfig } from '~/.config'

const year = new Date().getFullYear()

const { website, author, footer } = themeConfig.site

function parseFooter(str: string) {
  str = str.replace(/%author/g, author)
  str = str.replace(/%website/g, website)
  str = str.replace(/%year/g, year.toString())
  return str
}
---

{footer.length && footer.map((str) => <p set:html={parseFooter(str)} />)}

<style>
  p {
    --at-apply: 'font-bold text-3';
  }
</style>
</file>

<file path="src/components/SiteNavigation.astro">
---
import { themeConfig } from '~/.config'

const { navLinks, socialLinks } = themeConfig.site
const { translate: t } = Astro.locals
---

<nav class="text-center font-bold" flex="~ col gap-4">
  <ul lg="flex-col items-start text-4" class="text-3.5" flex="~ row gap-2 justify-center">
    {
      navLinks.map((nav) => (
        <li>
          <a class="" href={nav.href}>
            {t(nav.name)}
          </a>
        </li>
      ))
    }
  </ul>
  <ul flex="~ row gap-1 justify-center">
    {
      socialLinks.map(({ href, name }) => (
        <li>
          <a href={href} target="_blank" title={name} class="not-underline-hover inline-flex items-center">
            <span class:list={[`i-mdi-${name}`, 'w-6 h-6']}>{name}</span>
          </a>
        </li>
      ))
    }
  </ul>
</nav>
</file>

<file path="src/components/SiteSeo.astro">
---
import { SEO, type SEOProps } from 'astro-seo'
import { getImage } from 'astro:assets'
import { themeConfig } from '~/.config'

interface Props {
  title?: string
  desc?: string
  banner?: ImageMetadata
}

const props = Astro.props

const configSEO = themeConfig.seo
const configSite = themeConfig.site

const title = props.title ?? configSite.title
const desc = props.desc ?? configSite.description
const canonical = configSite.website
const twitter = configSEO.twitter
const rss = new URL('/atom.xml', Astro.site).toString()
const optimizedImage = await getOptimizedImageURL()

const seoLinks = [
  { rel: 'icon', href: '/favicon.svg', type: 'image/svg+xml' },
  {
    rel: 'alternate',
    type: 'application/rss+xml',
    title: themeConfig.site.title,
    href: rss,
  },
  ...configSEO.link,
]

const seoMeta = [
  { name: 'viewport', content: 'width=device-width' },
  { name: 'generator', content: Astro.generator },
  { name: 'twitter:image:src', content: optimizedImage },
  { name: 'twitter:image:alt', content: desc },
  { name: 'twitter:creator', content: twitter },
  { name: 'twitter:site', content: twitter },
  { name: 'twitter:card', content: 'summary_large_image' },
  { name: 'twitter:title', content: title },
  { name: 'twitter:description', content: desc },
  ...configSEO.meta,
]

const openGraph: SEOProps['openGraph'] = {
  basic: {
    title: title,
    type: 'article',
    image: optimizedImage,
    url: canonical,
  },
}

async function getOptimizedImageURL() {
  const image = props.banner && (await getImage({ src: props.banner, format: 'jpeg' }))
  return new URL(image?.src ?? '/placeholder.png', Astro.url).toString()
}
---

<SEO
  charset="utf-8"
  title={title}
  description={desc}
  extend={{ link: seoLinks, meta: seoMeta }}
  openGraph={openGraph}
/>
</file>

<file path="src/content/spec/about.md">
---
title: "About Me"
layout: "../layouts/AboutLayout.astro"
---

# Hey, I’m Anshuman 👨‍💻

Currently trying to answer two questions:
1. How do we build **intelligence** that actually understands us?
2. And what kind of life is worth living while doing that?

I’m a CS undergrad from India, working toward a life that blends **research**, **aesthetics**, and **meaning** — the kind where your code runs, your coffee’s hot, and your ideas might just matter.

---

## 🔭 Right now, I’m focused on:

- 📘 **Mastering ML foundations**  
  (CS229, CS231N, CS224N — the real deal, not the YouTube-summary kind)

- 🧪 **Building & replicating ML projects**  
  Especially in **probabilistic models** and **value alignment** — things that can break, fail, or surprise me.

- ✍️ **Documenting my learning publicly**  
  Not because I want to be an “influencer,” but because clarity scales.

- 🌍 **Applying for elite research internships in Europe**  
  ETH Zurich is the dream. But I’m building my way in — with code, ideas, and this blog.

---

## 🧠 What keeps me up at night?

- Alignment, consciousness, cognition  
- Simulation theory and Gödel’s incompleteness  
- The beauty of first principles  
- Whether intelligence is actually understandable  

---

## 🎯 Long term?

I want to contribute to AI that’s **safe**, **elegant**, and **aligned with human values**.  
Not just optimized for clicks — but for meaning.

---

> "Obsession is just direction without permission."

If you're working on alignment, ML research, or just love building cool things —  
reach out. I don’t bite.

📬 [asquare567@gmail.com](mailto:asquare567@gmail.com)  
🐦 [x.com/justhuman567](https://x.com/justhuman567)
</file>

<file path="src/pages/[...page].astro">
---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import { themeConfig } from '~/.config'
import Pagination from '~/components/Pagination.astro'
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import LayoutPost from '~/layouts/LayoutPost.astro'
import { getPostDescription, getPosts } from '~/utils'

const { translate: t } = Astro.locals

export const getStaticPaths = (async ({ paginate }) => {
  const posts = await getPosts()
  posts.sort((a, b) => {
    if (a.data.pin && !b.data.pin) return -1
    if (!a.data.pin && b.data.pin) return 1
    return 0
  })
  return paginate(posts, { pageSize: themeConfig.site.pageSize })
}) satisfies GetStaticPaths

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { page } = Astro.props
---

<LayoutDefault>
  <section contain-layout flex="~ col gap-7.5">
    {
      page.data.map((post) => (
        <LayoutPost post={post}>
          <p class="line-clamp-4">{getPostDescription(post)}</p>
        </LayoutPost>
      ))
    }
  </section>
  <Pagination
    showLeft={Boolean(page.url.prev)}
    leftTitle={t('prev')}
    leftUrl={page.url.prev}
    showRight={Boolean(page.url.next)}
    rightTitle={t('next')}
    rightUrl={page.url.next}
    currentPage={page.currentPage}
    totalPage={page.lastPage}
  />
</LayoutDefault>
</file>

<file path="src/types/index.ts">
import type { CollectionEntry } from 'astro:content'

export type Post = CollectionEntry<'posts'>
export * from './themeConfig.ts'
</file>

<file path=".node-version">
v22.12.0
</file>

<file path="scripts/create-post.ts">
import { execSync } from 'node:child_process'
import fs from 'node:fs'
import path from 'node:path'
import consola from 'consola'
import dayjs from 'dayjs'

createPost()

/**
 * Create a new post.
 * Prompts the user for a file name and extension, and creates a new post file with frontmatter.
 * If successful, opens the new post file in the default editor.
 */
async function createPost(): Promise<void> {
  consola.start('Ready to create a new post!')

  const filename: string = await consola.prompt('Enter file name: ', { type: 'text' })
  const extension: string = await consola.prompt('Select file extension: ', { type: 'select', options: ['.md', '.mdx'] })
  const isDraft: boolean = await consola.prompt('Is this a draft?', { type: 'confirm', initial: true })

  const targetDir = './src/content/posts/'
  const fullPath: string = path.join(targetDir, `${filename}${extension}`)

  const frontmatter = getFrontmatter({
    title: filename,
    pubDate: dayjs().format('YYYY-MM-DD'),
    categories: '[]',
    description: '\'\'',
    slug: filename.toLowerCase().replace(/\s+/g, '-'),
    draft: isDraft ? 'true' : 'false',
  })

  try {
    fs.writeFileSync(fullPath, frontmatter)
    consola.success('New post created successfully!')

    const open: boolean = await consola.prompt('Open the new post?', { type: 'confirm', initial: true })
    if (open) {
      consola.info(`Opening ${fullPath}...`)
      execSync(`code "${fullPath}"`)
    }
  }
  catch (error) {
    consola.error((error as Error).message || 'Failed to create new post!')
  }
}

/**
 * Create frontmatter from a data object.
 * @param data The data object to convert to frontmatter.
 * @returns The frontmatter as a string.
 */
function getFrontmatter(data: { [key: string]: string }): string {
  const frontmatter = Object.entries(data)
    .map(([key, value]) => `${key}: ${value}`)
    .join('\n')

  return `---\n${frontmatter}\n---`
}
</file>

<file path="src/components/Pagination.astro">
---
const { translate: t } = Astro.locals

interface Props {
  showLeft?: boolean
  leftTitle?: string
  leftUrl?: string

  showRight?: boolean
  rightTitle?: string
  rightUrl?: string

  showPageCount?: boolean
  currentPage?: number
  totalPage?: number
}

const {
  showLeft = true,
  showRight = true,
  leftTitle,
  rightTitle,
  leftUrl,
  rightUrl,
  showPageCount = true,
  currentPage,
  totalPage,
} = Astro.props
---

<footer class="mt-5">
  {
    showPageCount && (
      <div class="mb-2.5">
        {t('page_number', currentPage)} / {t('page_count', totalPage)}
      </div>
    )
  }
  <div class="flex items-center gap-2">
    {
      showLeft && (
        <a title={leftTitle} href={leftUrl}>
          <span class="inline-block vertical-mid i-mdi-chevron-double-left w-4 h-4" />
          {leftTitle}
        </a>
      )
    }
    {
      showRight && (
        <a title={rightTitle} href={rightUrl}>
          {rightTitle}
          <span class="inline-block vertical-mid i-mdi-chevron-double-right w-4 h-4" />
        </a>
      )
    }
  </div>
</footer>
</file>

<file path="src/components/PostMeta.astro">
---
import type { Post } from '~/types'
import { formatDate } from '~/utils'
import PostCategory from './PostCategory.astro'

interface Props {
  post: Post
}

const { post } = Astro.props
const { translate: t } = Astro.locals

const categoryList = post.data.categories ?? []
---

<header flex="~ col gap-2">
  <h1 class="post-title">
    <a class="not-prose" href={`/posts/${post.id}/`}>{post.data.title}</a>
  </h1>
  <div class="text-3.5">
    <span>{t(post.data.modDate ? 'updated_at' : 'posted_at')}</span>
    <time>{formatDate(post.data.modDate ?? post.data.pubDate)}</time>
    {categoryList.map((category) => <PostCategory category={category} />)}
  </div>
</header>
</file>

<file path="src/pages/categories/index.astro">
---
import { themeConfig } from '~/.config'
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import { getCategories, getPathFromCategory } from '~/utils/index'

const { translate: t } = Astro.locals
const categoryMap = await getCategories()

const list = getListFromMap(categoryMap)

function getListFromMap(map: typeof categoryMap) {
  return Array.from(map).map(([key, value]) => ({
    title: key,
    href: `/categories/${getPathFromCategory(key, themeConfig.site.categoryMap)}`,
    size: t('categories_count', value.length),
  }))
}
---

<LayoutDefault>
  <section>
    <h2 class="post-title">{t('Categories')}</h2>
    <ul class="pl-6" flex="~ col gap-4">
      {
        list.map(({ title, href, size }) => (
          <li>
            <h3 class="post-title">
              <a href={href}># {title}</a>
            </h3>
            <p>{size}</p>
          </li>
        ))
      }
    </ul>
  </section>
</LayoutDefault>
</file>

<file path="src/pages/about.astro">
---
import { getEntry, render } from 'astro:content'
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import { formatDate } from '~/utils'

const { translate: t } = Astro.locals
const aboutPost = await getEntry('spec', 'about')
if (!aboutPost) {
  throw new Error('No about post found')
}
const { Content } = await render(aboutPost)
---

<LayoutDefault>
  <header flex="~ col gap-2">
    <h1 class="post-title">
      <a class="not-prose">{aboutPost.data.title}</a>
    </h1>
    <div class="text-3.5">
      <span>{t('posted_at')}</span>
      <time>{formatDate(aboutPost.data.pubDate)}</time>
    </div>
  </header>
  <article class="prose">
    <Content />
  </article>
</LayoutDefault>
</file>

<file path="src/pages/atom.xml.ts">
import type { APIContext } from 'astro'
import type { Post } from '~/types'
import rss from '@astrojs/rss'
import MarkdownIt from 'markdown-it'
import sanitizeHtml from 'sanitize-html'
import { themeConfig } from '~/.config'
import { getPosts } from '~/utils'

const parser = new MarkdownIt()
const { title, description, website, author } = themeConfig.site
const allowedTags = sanitizeHtml.defaults.allowedTags.concat(['img'])

export async function GET(_context: APIContext) {
  const posts = await getPosts()
  return rss({
    title,
    description,
    site: website,
    items: posts.map(getPostItem),
    customData: getCustomData(),
  })
}

function getCustomData() {
  const follow = themeConfig.rss.follow
  if (!follow)
    return ''
  const { feedId, userId } = follow
  return `<follow_challenge><feedId>${feedId}</feedId><userId>${userId}</userId></follow_challenge>`
}

function getPostItem(post: Post) {
  const postItem = {
    link: `/posts/${post.id}/`,
    author: post.data.author ?? author,
    content: getPostContent(post),
    title: post.data.title,
    pubDate: post.data.pubDate,
    description: post.data.description,
    customData: post.data.customData,
    categories: post.data.categories,
    commentsUrl: post.data.commentsUrl,
    source: post.data.source,
    enclosure: post.data.enclosure,
  }

  return postItem
}

function getPostContent(post: Post) {
  const isFullText = themeConfig.rss.fullText
  if (!isFullText)
    return post.data.description
  return sanitizeHtml(parser.render(post.body || ''), { allowedTags })
}
</file>

<file path="src/styles/global.css">
:root {
  --uno-colors-primary: theme('colors.primary');
  --uno-colors-background: theme('colors.background');
  --uno-fonts-ui: theme('fontFamily.ui');
  --uno-colors-shadow: theme('colors.shadow');
}
html {
  --at-apply: antialiased;
  --at-apply: 'bg-background c-primary font-ui text-shadow-color-shadow';

  text-shadow: 1px 1px 1px var(--uno-colors-shadow);
  background-size: 7px 7px;
  background-image: linear-gradient(to right, var(--uno-colors-shadow) 1px, transparent 1px),
    linear-gradient(to bottom, var(--uno-colors-shadow) 1px, transparent 1px);
}

:where(a):not(.not-underline-hover) {
  --at-apply: 'p-1.5px';
  --at-apply: 'decoration-underline decoration-0.1em decoration-offset-2px';
  --at-apply: 'ease-in-out duration-300ms';
  --at-apply: 'hover:(c-background bg-primary decoration-primary)';
}
</file>

<file path="src/.config/user.ts">
import type { UserConfig } from '~/types'

export const userConfig: Partial<UserConfig> = {
  site: {
    title: 'Notes and Ideas',
    subtitle: 'A web blog',
    author: 'Anshuman',
    description: '',
    website: 'https://asquare.site',
    pageSize: 5,
    socialLinks: [
      { name: 'github', href: 'https://github.com/iemAnshuman' },
      { name: 'x', href: 'https://x.com/justhuman567' }, // 'x' matches the built‑in icon set
    ],
    navLinks: [
      { name: 'Posts', href: '/' },
      { name: 'Archive', href: '/archive' },
      { name: 'About', href: '/about' },
    ],
    footer: [
      '© %year <a target="_blank" href="%website">%author</a>',
    ],
  },

  appearance: {
    theme: 'system',
    locale: 'en-us',
    colorsLight: {
      primary: '#2e405b',
      background: '#ffffff',
    },
    colorsDark: {
      primary: '#ffffff',
      background: '#232222',
    },
    fonts: {
      header:
        '"HiraMinProN-W6","Source Han Serif CN","Source Han Serif SC","Source Han Serif TC",serif',
      ui: '"Source Sans Pro","Roboto","Helvetica","Helvetica Neue","Source Han Sans SC","Source Han Sans TC","PingFang SC","PingFang HK","PingFang TC",sans-serif',
    },
  },

  seo: {
    twitter: '@justhuman567',
    meta: [],
    link: [],
  },

  rss: { fullText: true },

  comment: {
    // disqus: { shortname: 'typography-astro' },
  },

  analytics: {
    googleAnalyticsId: '',
    umamiAnalyticsId: '',
  },

  latex: { katex: true },
}
</file>

<file path="src/components/SiteTitle.astro">
---
import { themeConfig } from '~/.config'

const { title, subtitle } = themeConfig.site
---

<hgroup
  lg="write-vertical-right items-start b-l-2px b-l-primary-solid text-left"
  flex="~ col gap-2.5"
  class="cursor-pointer text-center duration-800 ease-in-out"
>
  <a
    class="not-underline-hover duration-800 ease-in-out"
    lg:p="x-2.5 b-12 hover:(t-3.75 b-8.75)"
    hover:lg=" bg-primary color-background"
    href="/"
  >
    <h3 class="text-5 font-extrabold font-header">{subtitle}</h3>
    <h1 class="text-8 font-extrabold font-header">{title}</h1>
  </a>
</hgroup>
</file>

<file path="src/content/posts/life_worth_living.md">
---
title: Life worth living
pubDate: 2025-06-01
modDate: 2025-06-03 15:01
categories: ["life"]
description: "What makes a life worth living?"
slug: life-worth
draft: false
pin: true
---


# What makes a life worth living?

This might be the single most important question you could tackle early in life. First off, let’s accept there is always an answer—even if it feels elusive. But why does this question matter so much? Sure, there are other profound questions like, “What is life?” or “What is the meaning of life?” or even “Why are we here?” But imagine we actually got an answer: say life is a simulation, and your entire purpose is to eat apples. Even if that were true, would you choose to do nothing but eat apples? Probably not. So maybe the answers to those questions aren't as crucial as we think. What really matters, perhaps, is figuring out how to live your life well. But here’s another snag—what exactly is a "good" life? With endless hedonistic pleasures available, defining a good life becomes incredibly complicated. Most people default to happiness as a metric, but if the point isn't solely happiness, then what? Suffering certainly isn't it—that would be too harsh and meaningless. You see the problem? Maybe a better question is: what makes a life truly worth living? For some, it’s family; for others, it's relationships, personal achievements, or finding balance. Everyone has a different perspective.

Let’s try approaching this logically:

If we're defining the "worth" of life, we're assuming life is something measurable. But how do we measure life? Duration? Quality? Both seem inadequate on their own. Logically, value must consider subjective factors (personal happiness, satisfaction, fulfillment) and objective factors (health, productivity, societal contribution). Given the complexity of human experience, subjective perceptions naturally become central—your internal perception fundamentally shapes how worthwhile you feel your life is.

People generally value coherence and consistency between their beliefs and actions—this alignment brings psychological comfort and clarity. If your actions contradict your beliefs, discomfort follows, eroding your life's perceived worth. So logically, coherence between who you are and what you do is vital.

Next, consider meaning. Meaning is essential because it stitches life's disparate events into a cohesive narrative. Without meaning, life fragments into disconnected, confusing episodes. Logically, a clear purpose provides direction, turning experiences into coherent, meaningful parts of your personal narrative.

Another critical piece is fulfillment. Humans naturally seek fulfillment through achieving goals and personal growth. Logically, fulfillment emerges as you set, pursue, and achieve meaningful objectives. Overcoming challenges provides lasting satisfaction, logically enhancing the perceived value of life.

Relationships also logically elevate life's worth. Humans, being inherently social, derive immense value from authentic connections. These genuine relationships—marked by trust, empathy, and mutual growth—dramatically improve life's perceived quality and depth.

Contributions matter too. Making a positive impact, whether on others or society, logically adds significant value. Knowing your existence improves lives or advances society gives profound meaning and worth to your life.

Authenticity logically matters because inauthenticity generates internal conflict. Aligning your external actions with your internal identity resolves psychological tension, logically enhancing your emotional health and overall life satisfaction.

Lastly, resilience logically addresses life's unpredictability. Life inevitably includes adversity, and resilience—the ability to effectively adapt to difficult conditions—ensures challenges become opportunities for growth, logically increasing life's value.

Ultimately, examining life logically shows us that coherence, meaningful purpose, fulfillment, authentic relationships, contributions, authenticity, and resilience collectively define what makes a life genuinely worth living.
</file>

<file path="src/pages/categories/[...category].astro">
---
import { themeConfig } from '~/.config'
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import type { Post } from '~/types'
import { formatDate, getCategories, getPathFromCategory } from '~/utils'

export async function getStaticPaths() {
  const categoryMap = await getCategories()
  return Array.from(categoryMap).map(([key, value]) => {
    const path = getPathFromCategory(key, themeConfig.site.categoryMap)
    return {
      params: { category: path },
      props: { posts: value, name: key },
    }
  })
}

const { posts, name } = Astro.props

function getListItems(posts: Post[]) {
  const result = posts.map((post) => ({
    title: post.data.title,
    href: `/posts/${post.id}/`,
    date: formatDate(post.data.pubDate),
  }))
  return result
}
---

<LayoutDefault>
  <section>
    <h2 class="post-title"># {name}</h2>
    <ul class="pl-6 py-3" flex="~ col gap-4">
      {
        getListItems(posts).map(({ title, href, date }) => (
          <li>
            <h3 class="post-title">
              <a href={href}>{title}</a>
            </h3>
            <time>{date}</time>
          </li>
        ))
      }
    </ul>
  </section>
</LayoutDefault>
</file>

<file path="src/pages/archive.astro">
---
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import type { Post } from '~/types'
import { formatDate, getPosts } from '~/utils'

const posts = await getPosts(true)

const yearMap = getYearMap(posts)

interface ListItem {
  title: string
  href: string
  date: string
}

function getYearMap(posts: Post[]) {
  const result = new Map<number, ListItem[]>()
  for (const post of posts) {
    const year = (post.data.pubDate ?? new Date()).getFullYear()
    const posts = result.get(year) ?? []
    posts.push(getListItem(post))
    result.set(year, posts)
  }
  return Array.from(result.entries())
}

function getListItem(post: Post): ListItem {
  return {
    title: post.data.title,
    href: `/posts/${post.id}/`,
    date: formatDate(post.data.pubDate, 'MM-DD'),
  }
}
---

<LayoutDefault>
  <div flex="~ col gap-4">
    {
      yearMap.map(([year, posts]) => (
        <section>
          <h2 class="post-title">{year}</h2>
          <ul class="pl-6" flex="~ col gap-4">
            {posts.map(({ title, href, date }) => (
              <li>
                <h3 class="post-title">
                  <a href={href}>{title}</a>
                </h3>
                <time>{date}</time>
              </li>
            ))}
          </ul>
        </section>
      ))
    }
  </div>
</LayoutDefault>
</file>

<file path="src/content.config.ts">
import { glob } from 'astro/loaders'
import { defineCollection, z } from 'astro:content'

const posts = defineCollection({
  loader: glob({ pattern: '**/*.{md,mdx}', base: './src/content/posts' }),
  schema: ({ image }) =>
    z.object({
      title: z.string(),
      pubDate: z.coerce.date(),
      modDate: z.coerce.date().optional(),
      categories: z.array(z.string()),
      draft: z.boolean().default(false).optional(),
      description: z.string().optional(),
      customData: z.string().optional(),
      banner: image()
        .refine(img => Math.max(img.width, img.height) <= 4096, { message: 'Width and height of the banner must less than 4096 pixels' })
        .optional(),
      author: z.string().optional(),
      commentsUrl: z.string().optional(),
      source: z.optional(z.object({ url: z.string(), title: z.string() })),
      enclosure: z.optional(z.object({ url: z.string(), length: z.number(), type: z.string() })),
      pin: z.boolean().default(false).optional(),
    }),
})

const spec = defineCollection({
  loader: glob({ pattern: '**/*.{md,mdx}', base: './src/content/spec' }),
})

export const collections = {
  posts,
  spec,
}
</file>

<file path="src/middleware.ts">
import { defineMiddleware } from 'astro:middleware'
import { themeConfig } from '~/.config'
import { LANGUAGES } from '~/i18n.ts'

export const onRequest = defineMiddleware(async (context, next) => {
  const locale = themeConfig.appearance.locale

  const localeTranslate = LANGUAGES[locale]

  function validateKey(key: string): key is keyof typeof localeTranslate {
    return key in localeTranslate
  }

  context.locals.translate = (key, param) => {
    if (!validateKey(key))
      return key
    if (!param)
      return localeTranslate[key]
    return localeTranslate[key].replace('%d', param.toString())
  }
  return next()
})
</file>

<file path="tsconfig.json">
{
  "extends": "astro/tsconfigs/strict",
  "compilerOptions": {
    "lib": ["esnext", "dom"],
    "baseUrl": ".",
    "paths": {
      "~/*": ["src/*"]
    }
  },
  "include": [
    "src/**/*.astro",
    "src/**/*.ts",
    ".astro/types.d.ts",
    "**/*"
  ],
  "exclude": ["dist"]
}
</file>

<file path="src/components/Comments.astro">
---
import { themeConfig } from '~/.config'
import type { Post } from '~/types'
import Disqus from '~/components/comments/Disqus.astro'
import Giscus from '~/components/comments/Giscus.astro'
import Twikoo from '~/components/comments/Twikoo.astro'

interface Props {
  post: Post
}

const { id, data } = Astro.props.post

const path = `/posts/${id}`
const url = `${Astro.site?.href}${path}`

const provider = getProvider()

function getProvider() {
  const result = Object.keys(themeConfig.comment)[0]
  return result || ''
}
---

{
  provider !== '' && (
    <div py-16>
      {provider === 'disqus' && <Disqus identifier={id} url={url} title={data.title} />}
      {provider === 'giscus' && <Giscus />}
      {provider === 'twikoo' && <Twikoo path={path} />}
    </div>
  )
}
</file>

<file path="src/content/posts/python_cheatsheet.md">
---
title: Essential Python Library Cheatsheet- NumPy, pandas, matplotlib, scikit-learn
pubDate: 2025-06-22
modDate: 2025-06-22 
categories: ["python"]
description: A compact and practical cheatsheet covering key functions and syntax from NumPy, pandas, matplotlib, and scikit-learn — perfect for quick refreshers and getting back on track fast.
slug: python-library-cheatsheet
draft: false
pin: true
banner: ./images/cheatsheet-banner.png
---

[Cheatsheet](https://drive.google.com/drive/folders/11qQGgTfeZBZQbaNqmk63vYE8OkD-vCao?usp=sharing)
</file>

<file path="src/i18n.ts">
export const LANGUAGES = {
  'zh-cn': {
    Home: '首页',
    Posts: '文章',
    Categories: '分类',
    Archive: '归档',
    Tags: '标签',
    About: '关于',
    Links: '链接',

    posted_at: '发布于',
    updated_at: '更新于',
    tag_count: '%d 篇',
    archive_count: '%d 篇',
    categories_count: '%d 篇',
    page_count: '共 %d 页',
    page_number: '第 %d 页',
    all_posts: '所有文章',
    comments: '评论',
    share: '分享到',
    prev: '上一页',
    next: '下一页',
    prev_post: '上一篇',
    next_post: '下一篇',
  },
  'en-us': {
    Home: 'Home',
    Posts: 'Posts',
    Categories: 'Categories',
    Archive: 'Archive',
    Tags: 'Tags',
    About: 'About',
    Links: 'Links',

    posted_at: 'Posted at',
    updated_at: 'Updated at',
    tag_count: '%d tags',
    archive_count: '%d post',
    categories_count: '%d post',
    page_count: '%d',
    page_number: 'Page %d',
    all_posts: 'All Posts',
    comments: 'comments',
    share: 'Share',
    prev: 'Previous',
    next: 'Next',
    prev_post: 'Previous post',
    next_post: 'Next post',
  },
  'zh-tw': {
    Home: '首頁',
    Posts: '文章',
    Categories: '分類',
    Archive: '歸檔',
    Tags: '標籤',
    About: '關於',
    Links: '鏈接',

    posted_at: '發佈於',
    updated_at: '更新於',
    tag_count: '%d 篇',
    archive_count: '%d 篇',
    categories_count: '%d 篇',
    page_count: '共 %d 頁',
    page_number: '第 %d 頁',
    all_posts: '所有文章',
    comments: '評論',
    share: '分享到',
    prev: '上一頁',
    next: '下一頁',
    prev_post: '上一篇',
    next_post: '下一篇',
  },
  'ja-jp': {
    Home: 'ホーム',
    Posts: '投稿',
    Categories: 'カテゴリー',
    Archive: 'アーカイブ',
    Tags: 'タグ',
    About: '私について',
    Links: 'リンク',

    posted_at: '投稿日',
    updated_at: '更新日',
    tag_count: '%d タグ',
    archive_count: '%d 投稿',
    categories_count: '%d 投稿',
    page_count: '%d',
    page_number: 'ページ %d',
    all_posts: 'すべての投稿',
    comments: 'コメント',
    share: 'シェア',
    prev: '前へ',
    next: '次へ',
    prev_post: '前の投稿',
    next_post: '次の投稿',
  },
  'it-it': {
    Home: 'Home',
    Posts: 'Articoli',
    Categories: 'Categorie',
    Archive: 'Archivio',
    Tags: 'Tag',
    About: 'Info',
    Links: 'Link',

    posted_at: 'Pubblicato in',
    updated_at: 'Aggiornato al',
    tag_count: '%d tag',
    archive_count: '%d articoli',
    categories_count: '%d articoli',
    page_count: '%d',
    page_number: 'Pagina %d',
    all_posts: 'Tutti gli articoli',
    comments: 'commenti',
    share: 'Condividi',
    prev: 'Precedente',
    next: 'Successivo',
    prev_post: 'Articolo Precedente',
    next_post: 'Articolo Succesivo',
  },
}
</file>

<file path="src/types/themeConfig.ts">
import type { Link, Meta } from 'astro-seo'
import type {
  AvailableLanguage,
  BooleanString,
  InputPosition,
  Loading,
  Mapping,
  Repo,
  Theme,
} from 'giscus'
import type { LANGUAGES } from '../i18n.ts'

export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
}

export interface ThemeConfig {
  site: ConfigSite
  appearance: ConfigAppearance
  seo: ConfigSEO
  comment: Partial<ConfigComment>
  rss: ConfigRSS
  analytics: ConfigAnalytics
  latex: ConfigLaTeX
}

export type UserConfig = DeepPartial<ThemeConfig>

export interface ConfigSite {
  title: string
  subtitle: string
  author: string
  description: string
  website: string
  pageSize: number
  socialLinks: { name: string, href: string }[]
  navLinks: { name: string, href: string }[]
  categoryMap: { name: string, path: string }[]
  footer: string[]
}

export interface ConfigAppearance {
  theme: 'light' | 'dark' | 'system'
  locale: keyof typeof LANGUAGES
  colorsDark: Colors
  colorsLight: Colors
  fonts: Fonts
}

export interface ConfigSEO {
  twitter: string
  meta: Partial<Meta>[]
  link: Partial<Link>[]
}

export interface ConfigComment {
  disqus: Disqus
  giscus: Giscus
  twikoo: Twikoo
}

export interface ConfigRSS {
  fullText?: boolean
  /** https://github.com/RSSNext/follow */
  follow?: { feedId: string, userId: string }
}

export interface ConfigAnalytics {
  /** google analytics */
  googleAnalyticsId: string
  umamiAnalyticsId: string
}

export interface ConfigLaTeX {
  katex: boolean
}

interface Colors {
  primary: string
  background: string
}

interface Fonts {
  header: string
  ui: string
  // TODO: 未实现
  _article?: string
  _code?: string
}

interface Twikoo {
  envId: string
  region?: string
  lang?: string
}

interface Disqus {
  shortname: string
}

interface Giscus {
  repo: Repo
  repoId?: string
  category?: string
  categoryId?: string
  mapping?: Mapping
  term?: string
  strict: BooleanString
  reactionsEnabled: BooleanString
  emitMetadata: BooleanString
  inputPosition: InputPosition
  theme: Theme
  lang: AvailableLanguage
  loading: Loading
}
</file>

<file path="src/utils/index.ts">
import type { Post } from '~/types'
import { getCollection } from 'astro:content'
import dayjs from 'dayjs'
import MarkdownIt from 'markdown-it'
import sanitizeHtml from 'sanitize-html'

export async function getCategories() {
  const posts = await getPosts()
  const categories = new Map<string, Post[]>()

  for (const post of posts) {
    if (post.data.categories) {
      for (const c of post.data.categories) {
        const posts = categories.get(c) || []
        posts.push(post)
        categories.set(c, posts)
      }
    }
  }

  return categories
}

export async function getPosts(isArchivePage = false) {
  const posts = await getCollection('posts')

  posts.sort((a, b) => {
    if (isArchivePage) {
      return dayjs(a.data.pubDate).isBefore(dayjs(b.data.pubDate)) ? 1 : -1
    }

    const aDate = a.data.modDate ? dayjs(a.data.modDate) : dayjs(a.data.pubDate)
    const bDate = b.data.modDate ? dayjs(b.data.modDate) : dayjs(b.data.pubDate)

    return aDate.isBefore(bDate) ? 1 : -1
  })

  if (import.meta.env.PROD) {
    return posts.filter(post => post.data.draft !== true)
  }

  return posts
}

const parser = new MarkdownIt()
export function getPostDescription(post: Post) {
  if (post.data.description) {
    return post.data.description
  }

  const html = parser.render(post.body || '')
  const sanitized = sanitizeHtml(html, { allowedTags: [] })
  return sanitized.slice(0, 400)
}

export function formatDate(date: Date, format: string = 'YYYY-MM-DD') {
  return dayjs(date).format(format)
}

export function getPathFromCategory(
  category: string,
  category_map: { name: string, path: string }[],
) {
  const mappingPath = category_map.find(l => l.name === category)
  return mappingPath ? mappingPath.path : category
}
</file>

<file path="CHANGELOG.md">
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]
### Added
- 添加视图过渡动画。
- 支持配置颜色。
- 支持 RSS 全文输出与 follow 配置。
- 支持配置字体。
- 支持添加自定义 SEO 链接。
- 添加 release 脚本与 CHANGELOG
- 支持 Google Analytics 配置。
- 添加自定义主题模块。

### Changed
- 扩大标题点击区域。
- 重新设计配置文件。
- 重新设计布局。
- 调整组件结构。
- 优化整体样式。
- 设置文章分页为首页。

### Fixed
- 修正在移动端时标题的动画错误。
- 修正侧边栏抖动的问题。
- 在主页滚动条错误展示的问题。
- 代码块被添加背景色的问题。
- 修复主题副标题错误取值的问题
- 防止 Safari 中 main 元素自动获得焦点

### Chore
- 使用 ESLint 格式化代码。
- presetTypography 替换 heti。
- 重写主题更新脚本。

## [0.1.0] - 2024-04-10
### Added
- Publish the first version of the theme.
</file>

<file path="src/env.d.ts">
/// <reference path="../.astro/types.d.ts" />
/// <reference types="astro/client" />
declare namespace App {
  interface Locals {
    translate: (key: string, param?: string | number) => string
  }
}

interface ImportMetaEnv {
  readonly PUBLIC_GOOGLE_ANALYTICS_ID: string
  readonly PUBLIC_UMAMI_ANALYTICS_ID: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}
</file>

<file path="src/.config/default.ts">
import type { ThemeConfig } from '~/types'

// This is the default configuration for the template, please do not modify it directly.
// You can override this configuration in the `.config/user.ts` file.

export const defaultConfig: ThemeConfig = {
  site: {
    title: '活版印字',
    subtitle: 'Typography',
    author: 'Moeyua',
    description: 'Rediscory the beauty of typography',
    website: 'https://astro-theme-typography.vercel.app/',
    pageSize: 5,
    socialLinks: [
      {
        name: 'github',
        href: 'https://github.com/moeyua/astro-theme-typography',
      },
      {
        name: 'rss',
        href: '/atom.xml',
      },
      {
        name: 'twitter',
        href: 'https://github.com/moeyua/astro-theme-typography',
      },
      {
        name: 'mastodon',
        href: 'https://github.com/moeyua/astro-theme-typography',
      },
    ],
    navLinks: [
      {
        name: 'Posts',
        href: '/',
      },
      {
        name: 'Archive',
        href: '/archive',
      },
      {
        name: 'Categories',
        href: '/categories',
      },
      {
        name: 'About',
        href: '/about',
      },
    ],
    categoryMap: [{ name: '胡适', path: 'hu-shi' }],
    footer: [
      '© %year <a target="_blank" href="%website">%author</a>',
      'Theme <a target="_blank" href="https://github.com/Moeyua/astro-theme-typography">Typography</a> by <a target="_blank" href="https://moeyua.com">Moeyua</a>',
      'Proudly published with <a target="_blank" href="https://astro.build/">Astro</a>',
    ],
  },
  appearance: {
    theme: 'system',
    locale: 'zh-cn',
    colorsLight: {
      primary: '#2e405b',
      background: '#ffffff',
    },
    colorsDark: {
      primary: '#FFFFFF',
      background: '#232222',
    },
    fonts: {
      header:
        '"HiraMinProN-W6","Source Han Serif CN","Source Han Serif SC","Source Han Serif TC",serif',
      ui: '"Source Sans Pro","Roboto","Helvetica","Helvetica Neue","Source Han Sans SC","Source Han Sans TC","PingFang SC","PingFang HK","PingFang TC",sans-serif',
    },
  },
  seo: {
    twitter: '@moeyua13',
    meta: [],
    link: [],
  },
  rss: {
    fullText: true,
  },
  comment: {
    // disqus: { shortname: "typography-astro" },
  },
  analytics: {
    googleAnalyticsId: '',
    umamiAnalyticsId: '',
  },
  latex: {
    katex: false,
  },
}
</file>

<file path="src/layouts/LayoutDefault.astro">
---
import { themeConfig } from '~/.config'
import SiteFooter from '~/components/SiteFooter.astro'
import SiteNavigation from '~/components/SiteNavigation.astro'
import SiteTitle from '~/components/SiteTitle.astro'
import SiteSeo from '~/components/SiteSeo.astro'
import LaTeX from '~/components/LaTeX.astro'
import Analytics from '~/components/Analytics.astro'
import ThemeScript from '~/components/ThemeScript.astro'
import '~/styles/global.css'

const lang = themeConfig.appearance.locale ?? 'en-us'
const dark = themeConfig.appearance.theme === 'dark'
---

<html lang={lang} class:list={['animation-prepared', { dark }]}>
  <head>
    <slot name="seo"> <SiteSeo /> </slot>
    <LaTeX />
    <Analytics />
    <ThemeScript />
  </head>

  <body
    class="h-100vh max-w-1200px min-w-390px mx-a"
    p="7.5 lg:(y-0 x-20)"
    lg="grid gap-x-6 cols-[3fr_1fr] rows-[1fr_9rem]"
  >
    <header
      class="transition-swup-header flex flex-col gap-2.5"
      m="7.5 lg:(x-0 t-20 b-4)"
      lg="row-1-2 col-2-3 justify-between items-start"
    >
      <SiteTitle />
      <SiteNavigation />
    </header>

    <main class="transition-swup-main overflow-y-scroll scrollbar-hide outline-none" lg="row-1-3 col-1-2 py-20 ">
      <slot />
    </main>

    <footer class="transition-swup-footer py-7.5" lg="row-2-3 col-2-3">
      <SiteFooter />
    </footer>

    <script>
      document.addEventListener('animationend', removeAnimation, false)
      function removeAnimation() {
        document.documentElement.classList.remove('animation-prepared')
        document.removeEventListener('animationend', removeAnimation, false)
      }
    </script>
    <style>
      /* 页面首次加载动画 */
      html.animation-prepared .transition-swup-header,
      html.animation-prepared .transition-swup-footer {
        animation: fade-in-down 1s linear 1;
        --at-apply: 'lg-animate-name-fade-in-left';
      }

      html.animation-prepared .transition-swup-main {
        animation: fade-in-down 1s linear 1;
      }

      @keyframes fade-in-down {
        0% {
          transform: translateY(-1rem);
          opacity: 0;
        }
        100% {
          transform: translateY(0);
          opacity: 1;
        }
      }

      @keyframes fade-in-left {
        0% {
          opacity: 0;
          transform: translateX(1rem);
        }

        100% {
          opacity: 1;
          transform: translateX(0);
        }
      }

      /* 页面过渡动画 */
      html.is-animating .transition-swup-main {
        opacity: 0;
        transform: translateY(-1rem);
      }
      html.is-leaving .transition-swup-main {
        opacity: 0;
        transform: translateY(1rem);
      }
      .transition-swup-main {
        transition-duration: 0.5s;
        transition-timing-function: linear;
        transform: translateY(0);
        opacity: 1;
      }
    </style>
  </body>
</html>
</file>

<file path="astro.config.ts">
import mdx from '@astrojs/mdx'
import sitemap from '@astrojs/sitemap'
import swup from '@swup/astro'
import robotsTxt from 'astro-robots-txt'
import { defineConfig } from 'astro/config'
import rehypeKatex from 'rehype-katex'
import remarkMath from 'remark-math'
import UnoCSS from 'unocss/astro'
import { themeConfig } from './src/.config'

// https://astro.build/config
export default defineConfig({
  site: themeConfig.site.website,
  prefetch: true,
  base: '/',
  markdown: {
    remarkPlugins: [
      remarkMath,
    ],
    rehypePlugins: [
      rehypeKatex,
    ],
    shikiConfig: {
      theme: 'dracula',
      wrap: true,
    },
  },
  integrations: [
    UnoCSS({ injectReset: true }),
    mdx({}),
    robotsTxt(),
    sitemap(),
    swup({
      theme: false,
      animationClass: 'transition-swup-',
      cache: true,
      preload: true,
      accessibility: true,
      smoothScrolling: true,
      updateHead: true,
      updateBodyClass: true,
    }),
  ],
})
</file>

<file path="README.md">
# Typography

<p align='center'>
  <img src='./public/typograph-og.jpg' alt='Typography' width='600'/>
</p>

<h6 align='center'>
<a href="https://astro-theme-typography.vercel.app/">Live Demo</a>
</h6>
<h5 align='center'>
<b>This work is rewrite from <a href="https://github.com/sumimakito/hexo-theme-typography">hexo-theme-Typography</a></b>
</h5>
<p align='center'>
<b>English</b> | <a href="./README.zh-CN.md">简体中文</a>
</p>

## Features

- Build with **Astro**, **TypeScript** and **UnoCSS**
- **Fast**. 100% [Pagespeed Score](https://pagespeed.web.dev/analysis/https-astro-theme-typography-vercel-app/j34nq9tx0s?form_factor=desktop).
- **Typography** Derived from prevalent Chinese typographic norms and aims to provide an enhanced reading experience for website visitors.
- **Responsive**. Responsive and works well on all screen sizes.
- **Accessible**. A well thought out semantic and accessible content.
- **SEO friendly**.Open Graph and Twitter Cards support for a better social sharing experience.
- **Sitemap** and **RSS feed** for search engines.
- i18n support.
- Support Disqus, Giscus, Twikoo as comment service.
- Dark mode support.

## Demo

> Submit a PR to add your blog Demo.

- [Live Demo](https://astro-theme-typography.vercel.app/)
- [My Blog](https://blog.moeyua.com/)
- [Julyfun's Blog (how to fully build this blog using `bun` in minutes)](https://julyfun.fun/posts/%E5%85%89%E9%80%9F%E6%90%AD%E5%BB%BA%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/)
- [Jinx's Blog](https://blog.mytest.cc/)
- [Unconventional Reading Notes](https://books.beyondxin.top/)

## Getting Started

Typography is a minimal, responsive and SEO-friendly Astro blog theme. This guide will help you get started with a new project.

### Quick Start

You can fork the repository to your account by clicking the Fork button in the upper right corner, click the button below, select the repository you just forked, click the Import button, and you will be taken to the project configuration page.

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new)
[![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start)

Or you can refer to the [Astro](https://docs.astro.build/guides/deploy/) documentation to deploy to your favorite platform.

### Add post

You can add content by creating a new markdown file in `src/content/posts`. The file need metadata in the frontmatter, like this:

```md
---
title: title
pubDate: 2021-08-01
categories: ["article"]
description: "description"
---
```

Or, you can use the following command in your terminal to create a new post:

```bash
pnpm theme:create
```

## Updating the theme

You can simply [`Sync Fork`](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork) on your own forked project (do not click Discard Changes, otherwise you will lose your own changes).

## Customization

Typography is highly customizable. The default configuration file is [src/.config/default.ts](src/.config/default.ts), you can override the default configuration in [src/.config/user.ts](src/.config/user.ts) as needed.

### Social links

Typography has built-in support for adding links to your social media accounts to the site via the social option in the config file:

```ts
socials: [
  {
    name: 'github',
    href: 'https://github.com/moeyua/astro-theme-typography'
  }
]
```

The `name` is the icon name in [Material Design Icons](https://pictogrammers.com/library/mdi/),
which will be automatically generated as the icon.

> Note that you need to restart the development server to see the changes.

### Navigation links

By default, the navigation are `Posts`, `Archive`, `Categories` and `About`. You can add more in the config file:

```ts
{
  navs: [
    {
      name: 'Categories',
      href: '/categories'
    }
  ]
}
```

And then add the corresponding page in `src/pages`, see more in [Astro Pages](https://docs.astro.build/en/core-concepts/astro-pages/)

### Dark mode

Typography supports dark mode. You can change it in the config file:

```ts
themeStyle: 'dark' // 'light' | 'dark' | 'system'
```

### Internationalization (i18n)

Typography provides built-in support for multilingual sites. By default, the language is `en-us`, you can change it in the config file:

```ts
locale: 'zh-cn'
```

For now, Typography supports below languages:

- `en-us`
- `zh-cn`
- `zh-tw`
- `ja-jp`
- `it-it`

You can see all supported languages in [src/i18n.ts](src/i18n.ts), and add more if you need.

### Comment

Typography supports multiple comment services, currently supports [Disqus](https://disqus.com/), [Giscus](https://giscus.app/) and [Twikoo](https://twikoo.js.org/).

Enable the corresponding comment service by adding the configuration to the config file, when you fill in multiple comment services, only the first service will be displayed.

#### Disqus

You can enable Disqus by adding the following configuration to the config file:

```ts
comments: {
  disqus: {
    shortname: 'your-disqus-shortname'
  }
}
```

#### Giscus

Based on the [Giscus web component](https://github.com/giscus/giscus-component?tab=readme-ov-file#using-the-web-component) implementation.

The prop names are the same as the data- attributes shown on the [giscus website](<(https://giscus.app/)>), but written in camelCase with the data- prefix and dashes removed.

You can enable Giscus by adding the following configuration to the config file:

```ts
{
  comments: {
    giscus: {
      repo: 'moeyua/astro-theme-typography'
      repoId: 'R_kgDOKy9HOQ'
      category: 'General'
      categoryId: 'DIC_kwDOKy9HOc4CegmW'
      mapping: 'title'
      strict: '0'
      reactionsEnabled: '1'
      emitMetadata: '1'
      inputPosition: 'top'
      theme: 'light'
      lang: 'zh-CN'
      loading: 'lazy'
    }
  }
}
```

#### Twikoo

You can enable Twikoo by adding the following configuration to the config file:

```ts
{
  comments: {
    twikoo: {
      envId: 'your-env-id'
    }
  }
}
```

## Pagespeed Score

[![Pagespeed Score](https://github.com/moeyua/astro-theme-typography/assets/45156493/2272f576-d6ff-49ef-a294-5c2acf365907)](https://pagespeed.web.dev/analysis/https-astro-theme-typography-vercel-app/j34nq9tx0s?form_factor=desktop)

## TODO

- [ ] WebSub
- [x] comment
- [ ] search
- [ ] analytics
</file>

<file path="package.json">
{
  "name": "astro-theme-typography",
  "type": "module",
  "version": "0.1.0",
  "packageManager": "pnpm@9.14.4",
  "repository": "https://github.com/moeyua/astro-theme-typography",
  "scripts": {
    "dev": "astro check && astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "theme:release": "esno scripts/release-theme.ts",
    "theme:create": "esno scripts/create-post.ts",
    "theme:update": "esno scripts/update-theme.ts"
  },
  "dependencies": {
    "@astrojs/check": "^0.9.4",
    "@astrojs/mdx": "^4.0.1",
    "@astrojs/rss": "^4.0.9",
    "@astrojs/sitemap": "^3.2.1",
    "@github/clipboard-copy-element": "^1.3.0",
    "@swup/astro": "^1.5.0",
    "astro": "^5.0.2",
    "astro-robots-txt": "^1.0.0",
    "astro-seo": "^0.8.4",
    "giscus": "^1.5.0",
    "rehype-katex": "^7.0.1",
    "remark-math": "^6.0.0",
    "typescript": "~5.7.2",
    "vite": "^6.0.2"
  },
  "devDependencies": {
    "@antfu/eslint-config": "^3.11.2",
    "@iconify-json/mdi": "^1.2.1",
    "@types/markdown-it": "^14.1.2",
    "@types/node": "^22.10.1",
    "@types/sanitize-html": "^2.13.0",
    "@unocss/eslint-plugin": "^0.65.1",
    "@unocss/preset-attributify": "^0.62.4",
    "@unocss/reset": "^0.62.4",
    "@unocss/transformer-directives": "^0.62.4",
    "astro-eslint-parser": "^1.1.0",
    "bumpp": "^9.8.1",
    "changelogen": "^0.5.7",
    "consola": "^3.2.3",
    "dayjs": "^1.11.13",
    "eslint": "^9.16.0",
    "eslint-plugin-astro": "^1.3.1",
    "eslint-plugin-format": "^0.1.3",
    "esno": "^4.8.0",
    "lint-staged": "^15.2.10",
    "markdown-it": "^14.1.0",
    "prettier-plugin-astro": "^0.13.0",
    "sanitize-html": "^2.13.1",
    "simple-git-hooks": "^2.11.1",
    "unocss": "^0.62.4",
    "unocss-preset-theme": "^0.13.0"
  },
  "simple-git-hooks": {
    "pre-commit": "pnpm lint-staged"
  },
  "lint-staged": {
    "*": "eslint --fix"
  }
}
</file>

</files>

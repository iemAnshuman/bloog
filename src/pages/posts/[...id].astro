---
import Comments from '~/components/Comments.astro'
import Pagination from '~/components/Pagination.astro'
import SiteSeo from '~/components/SiteSeo.astro'
import LayoutDefault from '~/layouts/LayoutDefault.astro'
import LayoutPost from '~/layouts/LayoutPost.astro'
import { getPosts } from '~/utils'
import { render } from 'astro:content'

// Generate static paths for all posts
export async function getStaticPaths() {
  const posts = await getPosts()
  return posts.map((post, idx) => {
    const prev = posts[idx - 1]
    const next = posts[idx + 1]

    // âœ… Astro 5 expects a string (or number/undefined), not an array
    const id = Array.isArray(post.id) ? post.id.join('/') : String(post.id)

    return {
      params: { id },                     // <-- string, not string[]
      props: { entry: post, prev, next },
    }
  })
}

type Props = {
  entry: any
  prev?: any
  next?: any
}

const { entry, prev, next } = Astro.props as Props
const { Content } = await render(entry)
const { translate: t } =
  ((Astro.locals ?? {}) as { translate?: (k: string) => string }) ?? {}

function getUrl(id?: string | string[]) {
  if (!id) return '/posts'
  const parts = Array.isArray(id) ? id : `${id}`.split('/')
  return `/posts/${parts.join('/')}`
}
---

<LayoutDefault>
  <SiteSeo
    slot="seo"
    title={entry.data.title}
    desc={entry.data.description}
    banner={entry.data.banner}
  />

  <LayoutPost post={entry}>
    <Content />
  </LayoutPost>

  <Pagination
    showLeft={Boolean(prev)}
    leftTitle={`${(t ?? ((s) => s))('prev_post')}: ${prev?.data.title}`}
    leftUrl={getUrl(prev?.id)}
    showRight={Boolean(next)}
    rightTitle={`${(t ?? ((s) => s))('next_post')}: ${next?.data.title}`}
    rightUrl={getUrl(next?.id)}
    showPageCount={false}
  />

  <Comments post={entry} />
</LayoutDefault>

<script>
  import '@github/clipboard-copy-element'

  document.addEventListener('clipboard-copy', (event) => {
    const target = event.target
    if (!(target instanceof HTMLElement)) return
    const icon = target.querySelector('.icon')
    if (!(icon instanceof HTMLElement)) return
    icon.classList.replace('i-mdi-content-copy', 'i-mdi-check')
    setTimeout(() => {
      icon.classList.replace('i-mdi-check', 'i-mdi-content-copy')
    }, 1500)
  })

  const codeBlocks = Array.from(document.querySelectorAll('pre'))
  const icon = "<div class='i-mdi-content-copy icon text-white'></div>"
  for (const codeBlock of codeBlocks) {
    const wrapper = document.createElement('div')
    wrapper.className = 'code-container'

    const copyButton = document.createElement('clipboard-copy')
    const code = codeBlock.querySelector('code')
    copyButton.value = code?.textContent ?? ''
    copyButton.className = 'clipboard-copy'
    copyButton.innerHTML = icon

    codeBlock.appendChild(copyButton)
    codeBlock.parentNode?.insertBefore(wrapper, codeBlock)
    wrapper.appendChild(codeBlock)
  }
</script>

<style is:global>
  .code-container { position: relative; }
  .clipboard-copy {
    position: absolute; top: .5rem; right: .5rem;
    width: 1.75rem; height: 1.75rem; display: flex; justify-content: center; align-items: center;
    border-radius: .25rem;
  }
  .clipboard-copy:hover { background-color: #30363d; }
</style>
